# cloudbuild.yaml
# Pipeline de CI/CD para o MealIA no Google Cloud Platform

steps:
  # Passo 1: Build da imagem do Backend (FastAPI)
  - id: 'build-backend' # Adicionando IDs para clareza
    name: 'gcr.io/cloud-builders/docker'
    args: [
      'build', 
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/mealia-backend/backend:$BUILD_ID',
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/mealia-backend/backend:latest',
      './backend'
    ]

  # Passo 2: Push da imagem para Artifact Registry
  - id: 'push-backend'
    name: 'gcr.io/cloud-builders/docker'
    args: ['push', '--all-tags', 'us-central1-docker.pkg.dev/$PROJECT_ID/mealia-backend/backend']
    waitFor: ['build-backend'] # Espera o passo anterior ser concluído

  # Passo 3: Deploy no Cloud Run (Otimizado para Free Tier)
  - id: 'deploy-backend'
    name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'mealia-backend',
      '--image', 'us-central1-docker.pkg.dev/$PROJECT_ID/mealia-backend/backend:$BUILD_ID',
      '--platform', 'managed',
      '--region', 'us-central1',
      '--allow-unauthenticated',
      '--port', '8000',
      '--memory', '256Mi',
      '--cpu', '0.5',
      '--min-instances', '0',
      '--max-instances', '3',
      '--set-env-vars', 'ENVIRONMENT=production'
    ]
    waitFor: ['push-backend'] # Espera o push do backend ser concluído

  # Passo 4 (Consolidado): Build e Deploy do Frontend (React) no Firebase Hosting
  - id: 'build-and-deploy-frontend'
    name: 'node:22'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Navega para o diretório do frontend
        cd frontend
        npm install
        npm run build
        echo "Frontend build concluído!"
        
        # Salva o diretório raiz do projeto antes de mudar
        # Use $$ para escapar o $ e evitar que o Cloud Build interprete como substituição
        PROJECT_ROOT=$$(pwd)/.. 

        # Instala localmente o firebase-tools usando um diretório temporário
        mkdir -p /tmp/firebase-cli
        cd /tmp/firebase-cli
        npm init -y # Inicializa um package.json
        npm install firebase-tools@latest # Instala firebase-tools localmente

        # Executa comandos firebase usando npm exec do DIRETÓRIO DE INSTALAÇÃO
        npm exec -- firebase --version
        
        # O $$ antes de PROJECT_ROOT também é importante aqui
        npm exec -- firebase deploy --only hosting --project $$PROJECT_ID --token "$$FIREBASE_TOKEN" --site meal-ai-development-c1604 --public "$$PROJECT_ROOT/frontend/build" --json "$$PROJECT_ROOT/firebase.json"
    # Usa o token do Secret Manager para autenticação
    secretEnv: ['FIREBASE_TOKEN']
    waitFor: ['-']
    # O waitFor: ['-'] indica que este passo pode rodar em paralelo com outros, se necessário.



# Configurações do build (Otimizado para Free Tier)
options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

timeout: '300s' # 5 minutos. Pode ser pouco se os builds forem longos. Ajuste se necessário.

substitutions:
  _REGION: 'us-central1' # Esta substituição não está sendo usada no seu YAML, mas pode ser útil para futuras expansões.

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/firebase-token/versions/latest
    env: 'FIREBASE_TOKEN'
    # Certifique-se de que o segredo 'firebase-token' existe no Secret Manager do GCP.
